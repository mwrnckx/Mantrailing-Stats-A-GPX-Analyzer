Imports System.Xml
Imports System.IO
Imports System.Globalization
Imports System.Text.RegularExpressions ' Přidáno pro práci s typem Match
Imports System.Collections.Generic

Module GPXDistanceCalculator

    ' Konstanty pro převod stupňů na radiány a poloměr Země
    Const PI As Double = 3.14159265358979
    Const EARTH_RADIUS As Double = 6371 ' Poloměr Země v kilometrech

    ' Funkce pro převod stupňů na radiány
    Private Function DegToRad(degrees As Double) As Double
        Return degrees * PI / 180
    End Function

    ' Funkce pro výpočet vzdálenosti mezi dvěma GPS body pomocí Haversinovy formule
    Private Function HaversineDistance(lat1 As Double, lon1 As Double, lat2 As Double, lon2 As Double) As Double
        Dim dLat As Double = DegToRad(lat2 - lat1)
        Dim dLon As Double = DegToRad(lon2 - lon1)

        Dim a As Double = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(DegToRad(lat1)) * Math.Cos(DegToRad(lat2)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)
        Dim c As Double = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a))

        Return EARTH_RADIUS * c ' Výsledek v kilometrech
    End Function

    ' Funkce pro načtení času z prvního uzlu <time> v GPX souboru
    Private Function GetFirstgpxTime(gpxFilePath As String) As DateTime
        Dim xmlDoc As New XmlDocument()
        Try
            xmlDoc.Load(gpxFilePath)
        Catch ex As Exception
            Form1.txtWarnings.AppendText($"Soubor {gpxFilePath}" & " se nepodařilo přečíst " & ex.Message & Environment.NewLine)
        End Try

        Dim namespaceManager As New XmlNamespaceManager(xmlDoc.NameTable)
        namespaceManager.AddNamespace("gpx", "http://www.topografix.com/GPX/1/1") ' URI jmenného prostoru GPX

        Dim timeNode As XmlNode = xmlDoc.SelectSingleNode("//gpx:time", namespaceManager)
        Dim dateTimeValue As DateTime
        ' Ověří, jestli uzel <time> existuje a má platnou hodnotu
        If timeNode IsNot Nothing AndAlso DateTime.TryParse(timeNode.InnerText, dateTimeValue) Then
            Return dateTimeValue
        Else
            ' Pokud uzel neexistuje nebo není platné datum, vrátí výchozí hodnotu DateTime
            Return dateTimeValue
            ' Throw New Exception("Datum nebylo nalezeno nebo není ve správném formátu.")
        End If


    End Function

    ' Funkce pro načtení popisu <desc> z prvního uzlu <trk> v GPX souboru
    Private Function Getdescription(gpxFilePath As String) As String
        Dim xmlDoc As New XmlDocument()
        Try
            xmlDoc.Load(gpxFilePath)
        Catch ex As Exception
            Form1.txtWarnings.AppendText($"Soubor {gpxFilePath}" & " se nepodařilo přečíst " & ex.Message & Environment.NewLine)
        End Try

        Dim namespaceManager As New XmlNamespaceManager(xmlDoc.NameTable)
        namespaceManager.AddNamespace("gpx", "http://www.topografix.com/GPX/1/1") ' URI jmenného prostoru GPX

        ' Vyhledání prvního uzlu <trk> a jeho poduzlu <desc>
        Dim descNode As XmlNode = xmlDoc.SelectSingleNode("/gpx:gpx/gpx:trk[1]/gpx:desc", namespaceManager)

        If descNode IsNot Nothing Then
            Return descNode.InnerText
        Else
            Return "Uzel <desc> nebyl nalezen."
        End If


    End Function

    ' Funkce pro načtení a výpočet délky pouze prvního segmentu z GPX souboru
    Private Function CalculateFirstSegmentDistance(gpxFilePath As String) As Double
        Dim totalLengthOfFirst_trkseg As Double = 0.0
        Dim lat1, lon1, lat2, lon2 As Double
        Dim firstPoint As Boolean = True

        ' Načtení GPX souboru
        Dim xmlDoc As New XmlDocument()
        Try
            xmlDoc.Load(gpxFilePath)
        Catch ex As Exception
            Form1.txtWarnings.AppendText($"Soubor {gpxFilePath}" & " se nepodařilo přečíst " & ex.Message & Environment.NewLine)
        End Try

        ' Vytvoření XML Namespace Manageru s definicí jmenného prostoru pro GPX
        Dim namespaceManager As New XmlNamespaceManager(xmlDoc.NameTable)
        namespaceManager.AddNamespace("gpx", "http://www.topografix.com/GPX/1/1") ' URI jmenného prostoru GPX

        ' Vybrání prvního segmentu trasy (<trkseg>) s použitím jmenného prostoru
        Dim firstSegment As XmlNode = xmlDoc.SelectSingleNode("//gpx:trkseg", namespaceManager)

        ' Pokud segment existuje, spočítáme jeho délku
        If firstSegment IsNot Nothing Then
            ' Výběr všech bodů trasy v prvním segmentu (<trkpt>)
            Dim trackPoints As XmlNodeList = firstSegment.SelectNodes("gpx:trkpt", namespaceManager)

            ' Výpočet vzdálenosti mezi jednotlivými body v prvním segmentu
            For Each point As XmlNode In trackPoints
                Try


                    ' Zkontroluj, zda atributy existují a načti je jako Double
                    If point.Attributes("lat") IsNot Nothing AndAlso point.Attributes("lon") IsNot Nothing Then
                        Dim lat As Double = Convert.ToDouble(point.Attributes("lat").Value, Globalization.CultureInfo.InvariantCulture)
                        Dim lon As Double = Convert.ToDouble(point.Attributes("lon").Value, Globalization.CultureInfo.InvariantCulture)

                        If firstPoint Then
                            ' Inicializace prvního bodu
                            lat1 = lat
                            lon1 = lon
                            firstPoint = False
                        Else
                            ' Výpočet vzdálenosti mezi předchozím a aktuálním bodem
                            lat2 = lat
                            lon2 = lon
                            totalLengthOfFirst_trkseg += HaversineDistance(lat1, lon1, lat2, lon2)

                            ' Přesun aktuálního bodu do proměnných lat1, lon1 pro další iteraci
                            lat1 = lat2
                            lon1 = lon2
                        End If
                    End If
                Catch ex As Exception
                    Form1.txtWarnings.AppendText("Chyba při zpracování bodu: " & ex.Message & Environment.NewLine)
                End Try
            Next
        Else
            Form1.txtWarnings.AppendText("Žádný segment nebyl nalezen v GPX souboru: " & gpxFilePath & Environment.NewLine)
        End If

        Return totalLengthOfFirst_trkseg ' Výsledek v kilometrech
    End Function


    ' Získání seznamu všech GPX souborů v zadaném adresáři
    Public Function GetgpxFiles(directorypath As String) As String()
        Try
            Return Directory.GetFiles(directorypath, "*.gpx")
        Catch ex As Exception
            Return Nothing
        End Try

    End Function

    ' Funkce pro zpracování všech GPX souborů v adresáři a uložení délek prvních segmentů do seznamu,
    ' s filtrováním podle data vytvoření souboru
    Public Function CalculateDistanceOfAllGPXFiles(directoryPath As String, startDate As DateTime, endDate As DateTime) As List(Of Double)
        Dim firstSegmentDistances As New List(Of Double)


        ' Zpracování každého souboru
        For Each gpxFilePath As String In Form1.gpxFiles
            ' Filtrování souborů podle data vytvoření
            Dim creationDate As DateTime = GetFirstgpxTime(gpxFilePath)
            If creationDate >= startDate AndAlso creationDate <= endDate Then
                ' Pokud soubor spadá do zadaného intervalu, vypočítáme délku prvního segmentu
                Dim distance As Double = CalculateFirstSegmentDistance(gpxFilePath)
                firstSegmentDistances.Add(distance)
                Form1.txtOutput.AppendText(Path.GetFileName(gpxFilePath) & " datum: " & creationDate.Date.ToString & "  délka:" & distance.ToString("F2") & " km" & Environment.NewLine)
            End If
        Next

        Return firstSegmentDistances
    End Function

    Public Function SumFirstSegmentDistances(distances As List(Of Double)) As Double
        Dim totalDistance As Double = 0.0

        For Each distance As Double In distances
            totalDistance += distance
        Next

        Return totalDistance
    End Function
    Public Sub DataCreatingChange(directoryPath As String)

        ' Pro všechny soubory ve složce
        For Each filePath As String In Form1.gpxFiles

            Dim fileName As String = Path.GetFileNameWithoutExtension(filePath)
            Dim newPath As String = filePath
            Dim newName As String
            Dim newDate As DateTime

            'zjisti datum prvního uzlu <time> v gpx souboru (datum zápisu trailu)
            Dim gpxDate As DateTime = GetFirstgpxTime(filePath)

            ' Ověř, zda název souboru odpovídá formátu YYYY-MM-DD
            Dim dateMatch As Match = System.Text.RegularExpressions.Regex.Match(fileName, "(\d{4})-(\d{2})-(\d{2})")

            Dim year As Integer
            Dim month As Integer
            Dim day As Integer
            Try
                If dateMatch.Success Then

                    year = Integer.Parse(dateMatch.Groups(1).Value)
                    month = Integer.Parse(dateMatch.Groups(2).Value)
                    day = Integer.Parse(dateMatch.Groups(3).Value)

                    ' Vytvoř DateTime objekt s přečteným datem
                    Dim fileNameDate As New DateTime(year, month, day)

                    ' zkontroluj zda datum v názvu odpovídá datu v uzlu <time> v gpx souboru

                    If gpxDate <> DateTime.MinValue AndAlso gpxDate.Date <> fileNameDate.Date Then

                        'opraví název souboru aby v něm bylo správné datum
                        newName = gpxDate.Date.Year.ToString & "-" & gpxDate.ToString("MM") & "-" & gpxDate.ToString("dd") & fileName.Remove(0, 10)
                        newPath = ifFileExist(newName, directoryPath)
                        File.Move(filePath, newPath)
                        Form1.txtWarnings.AppendText($"Změnil jsem název souboru {fileName} na {newName}" & vbCrLf)
                        ' Nastav datum vytvoření a datum modifikace souboru
                        newDate = gpxDate
                    ElseIf gpxDate = DateTime.MinValue Then
                        newDate = fileNameDate
                    ElseIf gpxDate.Date = fileNameDate.Date Then
                        newDate = fileNameDate
                    End If


                ElseIf gpxDate <> DateTime.MinValue Then
                    'změní název souboru aby v něm bylo  datum
                    If Form1.chbDateToName.Checked Then

                        newName = gpxDate.Date.Year.ToString & "-" & gpxDate.ToString("MM") & "-" & gpxDate.ToString("dd") & fileName
                        newPath = ifFileExist(newName, directoryPath)


                        File.Move(filePath, newPath)
                        Form1.txtWarnings.AppendText($"Soubor {fileName} neodpovídá formátu YYYY-MM-DD." & vbCrLf)
                        Form1.txtWarnings.AppendText($"Změnil jsem název souboru {fileName} na {newName}" & vbCrLf)
                    End If
                    newDate = gpxDate
                Else
                    MsgBox($"Datum souboru {fileName} se nepodařilo zjistit!")
                    Form1.txtWarnings.AppendText($"Datum souboru {fileName} se nepodařilo zjistit!" & vbCrLf)
                End If

                'změní datum vytvoření souboru
                If Form1.chbDateOfCreation.Checked Then
                    If newDate <> DateTime.MinValue And (newDate.Date <> File.GetCreationTime(newPath) Or newDate.Date <> File.GetLastWriteTime(newPath)) Then
                        File.SetCreationTime(newPath, newDate)
                        File.SetLastWriteTime(newPath, newDate)
                        Form1.txtWarnings.AppendText($"Nastavuji datum pro {fileName} na {newDate}" & vbCrLf)
                    End If
                End If


            Catch ex As Exception
                MsgBox(ex.ToString & fileName)
            End Try

        Next

        'pro jistotu, kdyby se měnily názvy souborů
        Form1.gpxFiles = GetgpxFiles(directoryPath)

    End Sub

    Private Function ifFileExist(newname As String, directorypath As String) As String
        Dim newPath As String = Path.Combine(directorypath, newname & ".gpx")

        ' Kontrola, zda soubor existuje
        Do While File.Exists(newPath)
            ' Zobrazí výstrahu uživateli
            MessageBox.Show("Soubor '" & newname & "' již existuje. Zadejte nové jméno souboru.", "Upozornění", MessageBoxButtons.OK, MessageBoxIcon.Warning)

            ' Požádá uživatele o nové jméno souboru
            newname = InputBox("Zadejte nové jméno souboru:", "Nový název souboru", newname)

            ' Kontrola, zda uživatel nezrušil operaci nebo nezadal prázdné jméno
            If String.IsNullOrWhiteSpace(newname) Then
                Console.WriteLine("Operace zrušena uživatelem.")
                ' Znovu otevře MessageBox, aby uživatel zadal správné jméno nebo ukončil operaci
                Continue Do
            End If

            newPath = Path.Combine(directorypath, newname & ".gpx")
        Loop

        Return newPath
    End Function


    Sub Createcsvfile()
        ' Cesta k souboru CSV
        Dim csvfilePath As String = Date.Now.ToShortDateString & " trails.csv"
        ' Kulturní nastavení pro české prostředí
        Dim culture As CultureInfo = New CultureInfo("cs-CZ")
        Try

            Using writer As StreamWriter = New StreamWriter(csvfilePath)

                For Each filePath In Form1.gpxFiles

                    ' Seznam hodnot k zápisu

                    ' Zápis hodnot ze souborů do CSV souboru


                    ' Převede číslo do řetězce s použitím správného formátu (čárka jako desetinný oddělovač)


                    ' Zapíšeme číslo do souboru (můžeme přidat středník pro oddělení, pokud je víc čísel na řádku)
                    writer.Write((Path.GetFileNameWithoutExtension(filePath) & ";"))
                    writer.Write((GetFirstgpxTime(filePath).ToString(culture) & ";"))
                    writer.Write((CalculateFirstSegmentDistance(filePath).ToString(culture) & ";"))
                    writer.Write((Getdescription(filePath).ToString(culture) & ";"))
                    writer.WriteLine()

                Next
            End Using

            Form1.txtWarnings.AppendText($"Soubor '{csvfilePath}' byl úspěšně vytvořen." & vbCrLf)

        Catch ex As Exception

        End Try
    End Sub


End Module

